{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Implementing CNAPP: Tool Selection and Day 1 Focus Areas","text":"<p>As someone who has done multiple Cloud-Native Application Protection Platform (CNAPP)  implementations, I've summarized my key considerations to help people who are in the evaluation / early stages of CNAPP adoption. Below is the high-level structure of how this document is organized:  </p> <ol> <li>What is CNAPP? </li> <li>Tool Selection Criteria </li> <li>Day 1 Focus Areas</li> <li>Closing Thoughts</li> </ol>"},{"location":"#what-is-cnapp","title":"What is CNAPP?","text":"<p>According to Gartner, \u201cCloud-native application protection platforms (CNAPPs) are a unified and tightly integrated set of security and compliance capabilities, designed to protect cloud-native infrastructure and applications. CNAPPs incorporate an integrated set of proactive and reactive security capabilities, including artifact scanning, security guardrails, configuration and compliance management, risk detection and prioritization, and behavioral analytics, providing visibility, governance and control from code creation to production runtime. CNAPP solutions use a combination of API integrations with leading cloud platform providers, continuous integration/continuous development (CI/CD) pipeline integrations, and agent and agentless workload integration to offer combined development and runtime security coverage.\u201d </p> <p>In other words, CNAPP is an umbrella term for multiple security capabilities that are integrated into a unified platform to secure cloud-native applications and infrastructure throughout their lifecycle. A typical CNAPP includes the following core capabilities:</p> <ul> <li>Cloud Security Posture Management (CSPM): Identifies misconfigurations and compliance risks in cloud infrastructure.  </li> <li>Cloud Infrastructure Entitlement Management (CIEM): Manages and automates access permissions in cloud environments.  </li> <li>Cloud Workload Protection Platform (CWPP): Protects cloud workloads, including containers, servers, and serverless functions.  </li> <li>Infrastructure-as-Code (IaC) Scanning: Detects security issues early in the development process.  </li> <li>Data Security Posture Management (DSPM): Discovers sensitive data sources and who has access to them.</li> </ul> <p>Below is an image from Gartner that provides a detailed view of the CNAPP capabilities landscape:</p> <p></p>"},{"location":"#tool-selection-criteria","title":"Tool Selection Criteria","text":"<p>When choosing a CNAPP solution, even though no vendor excels in all areas of CNAPP, I strongly advocate for a \"best-of-suite\" approach rather than assembling multiple \"best-of-breed\" tools. It is operationally easier to roll out across the organization, reduces the complexity associated with maintaining and managing various tools, and provides unified visibility across the different types of findings as it eliminates the need to correlate data from disparate tools. When evaluating CNAPP solutions, consider the following:</p> <ul> <li>Prioritize Vendors That Best Address Key Use-Cases: Identify the critical CNAPP capabilities required for your organization\u2019s cloud security strategy. My suggestion is to prioritize vendors with strong CSPM, vulnerability scanning, and CIEM features, even if other features are less developed, as long as they have a clear plan to support additional CNAPP capabilities of interest, such as CWPP, DSPM, attack surface management, software supply chain security, IaC scanning, container image scanning, etc.  </li> <li>Include Stakeholders From Different Teams: The capabilities that CNAPP offers extend to several different teams within the organization (Vulnerability Management, IAM, Security Monitoring, Data Protection), and including them in the selection process enables the organization to make a collective decision and helps to minimize the potential politics that can occur when key parties are left out of the decision-making process.  </li> <li>Require Graph Databases: Given the dynamic and interconnectedness of modern cloud environments where complex relationships exist between resources, identities, configurations, and data flows, traditional relational databases can't keep up with modeling and analyzing these intricate webs of connections. This is where graph databases shine as they provide:<ul> <li>Comprehensive Visibility: Maps the complex relationships between various cloud-native components (resources, identities, networking, security). This approach offers a holistic view of the cloud environment and helps in developing an architectural understanding of the various applications and workloads.</li> <li>Contextual Risk Prioritization: Different types of findings (vulnerabilities, misconfigurations) on a given resource, coupled with the potential attack paths for that resource (by analyzing IAM and networking) can be correlated to apply better risk prioritization and perform targeted remediations.</li> <li>Multi-Cloud Consistency: A unified graph data model where the representation of different resource types and relationships are standardized, can enable higher consistency in how security is applied across multi-cloud environments.   </li> </ul> </li> <li>Agentless Vulnerability Scanning: Due to the ephemeral nature of resources and the decentralized nature of operating in the cloud where application and development teams own their entire stacks (including the lifecycle of the VM instances), consistently deploying agents on VMs is challenging, especially at organizations where the concept of golden images doesn\u2019t exist. This is where agentless scanning can help streamline operations and provide automated vulnerability scanning capabilities.<ul> <li>However, agent-based solutions should be considered when CWPP is a priority as it is more effective in real-time monitoring / blocking of malicious activities / behavior.        </li> </ul> </li> <li>Prioritize Comprehensive APIs: Prefer vendors with well-designed and flexible APIs that do not limit you to carrying out actions only via their console. Robust APIs will enable you to automate processes and workflows, integrate with enterprise tools (such as ticketing and messaging systems, vulnerability repositories, and SIEMs), and efficiently handle reporting and remediation tasks.</li> <li>Alignment With Vendor Roadmaps: Assess the vendor's roadmap to ensure it aligns with your future requirements and strategic goals. For example, if your organization is making a big push for AI workloads in the near-future, consider vendors that have AI Posture Management (AIPM) capabilities in their short-term roadmap. </li> </ul> <p>By selecting a best-of-suite CNAPP solution that has CSPM, vulnerability scanning, and CIEM as its core capability and also has the required flexibility / extensibility as a platform, organizations can benefit from operational efficiencies, spend less time upskilling on multiple tools, and ultimately enhance their ability to manage risks in dynamic cloud-native environments.</p>"},{"location":"#day-1-focus-areas","title":"Day 1 Focus Areas","text":"<p>As CNAPP definitions evolve, new capabilities (read: acronyms) are added, and vendors market their platforms as the silver bullet for addressing all cloud security needs, it is tempting to enable every available feature. However, this approach can overwhelm security teams with alerts and frustrate developers with a sudden influx of issues that need to be remediated, creating friction between teams meant to collaborate on reducing security risks. To avoid these pitfalls, consider the following:</p> <ul> <li>Prioritize CSPM Operationalization: Prioritize enablement of CSPM and vulnerability scanning (from hereon, \u201cCSPM\u201d) on day one of your CNAPP implementation journey. This approach provides the following benefits:<ul> <li>Quick Value Realization: These findings are typically easier to understand and address, allowing you to establish a baseline understanding of your cloud security posture and conduct burndown campaigns to reduce risks and demonstrate \"quick-wins\". This justifies the benefits in your CNAPP investment, crucial for building momentum and securing stakeholder buy-in.</li> <li>Platform Familiarity: Starting with CSPM allows your security team to become familiar with the CNAPP tool's interface, graph database, data model, reporting mechanisms, and overall functionality. This foundational knowledge is essential for successfully implementing more advanced capabilities in the future.</li> <li>Upskilling Opportunity: Implementing CSPM first gives your security teams time to upskill on cloud security concepts, creating a foundation for future implementation of more advanced capabilities.</li> <li>Developer Acclimation: CSPM provides an opportunity for developers to understand how security issues are reported and how they need to consume and act on this information. This gradual introduction to the platform helps smooth the transition to a more security-aware development process.  </li> </ul> </li> <li>Enable Self-Service Consumption of Findings: Set up role-based access control (RBAC) to enable self-service consumption of security findings for the developer community. This approach is crucial for conducting timely remediation and fostering a culture of shared responsibility within the organization. Below are the benefits of enabling self-service:<ul> <li>Developer Empowerment: The onus for remediating issues is on the developers and cloud engineers; hence, providing them with self-service access to relevant security findings and remediation guidance allows them to take ownership of security issues associated with their applications.</li> <li>Accelerated Remediation: Generally, CNAPP tools have descriptive remediation guidance that is actionable. By putting information directly in the hands of those who can act on it, your organization can significantly speed up the fix process and reduce the overall time-to-remediation.</li> <li>Shared Responsibility: By providing developers with tool access, they can monitor the security posture of their applications on-demand, and provide inputs on false positives or potential policy adjustments, thereby fostering a collaborative culture for cloud security. Additionally, I have observed scenarios where developers and engineers often want to use CNAPP for their own non-security related use-cases (e.g., tagging, building cloud asset inventory, identifying resources that are no longer needed, etc.), thereby further making the case for the platform.  </li> </ul> </li> <li>Metrics &amp; Reporting: Develop reporting for CSPM, ideally aligned to your SLA / vulnerability management standards, to measure the overall health of the program and remediation effectiveness. This will enable cultural changes and set proper expectations around remediation timelines.  </li> <li>Conduct Regular Office Hours: Hold regular sessions and office hours, participate in developer forums, set up communication channels, etc. to educate the developers on the platform and hand-hold them through remediations when doing the initial roll-out. This will build goodwill and allow you to develop effective processes that incorporate valuable insights based on how your development teams think and operate.</li> <li>Custom Develop &amp; Fine-Tune CSPM Policies: As your organization becomes familiar with the initial roll-out, it is crucial to move beyond out-of-the-box (OOB) policies towards custom policy development and fine-tuning (\u201ccustomization\u201d) to better align with the organization\u2019s security standards and reduce false positives. Below are key considerations for customizing policies:<ul> <li>Reduce Alert Fatigue &amp; False Positives: Out-of-the-box policies often generate a high volume of alerts, many of which may be false positives / irrelevant to your environment. Customization helps reduce noise and allows your teams to focus on the most critical issues.</li> <li>Align with Security Standards: OOB policies may not adequately address your organization's unique risk profile or compliance requirements and may not be aligned with your security standards and controls. By developing custom policies based on security standards, cloud usage patterns and application architectures, you can have higher confidence in your policy set and improved accuracy in the legitimacy of the issues identified. Additionally, since these policies are contextualized for your organization\u2019s cloud environments, they reduce friction and improve adoption among your development teams.</li> </ul> </li> </ul> <p>Prioritizing CSPM as your initial focus establishes a robust foundation that not only addresses critical security risks but also allows the organization to build confidence in its processes, workflows, and ability to remediate issues. This provides the foundation for the implementation of more advanced CNAPP capabilities in a manageable manner with minimal resistance / disruptions.</p>"},{"location":"#closing-thoughts","title":"Closing Thoughts","text":"<p>In summary, the tool in itself is very powerful and provides good visibility but the successful implementation and ROI are dependent on people and process elements where activities like fostering a shared responsibility culture, partnering with and enabling developers, phasing the roll-out of the platform, and designing effective processes are critical factors for success. </p> <p>PS: CNAPP is a broad area with many layers to unpack and there are several topic areas (listed below) that I did not cover in this blog post that require deep-dive of their own and will be a good candidate for a follow-up blog on \u201cday 2\u201d activities and beyond:</p> <ul> <li>Pre-deployment security capabilities such as container image scanning, secrets scanning, software supply chain  </li> <li>Integrations with ticketing and messaging platforms (Jira, Slack), SIEM (Splunk, Sentinel), vulnerability warehouse (ServiceNow VR)  </li> <li>Strategy for routing different styles of issues to different sources  </li> <li>Operationalizing the various CNAPP capabilities </li> </ul> <p>References:</p> <ol> <li>Gartner - https://www.gartner.com/doc/reprints?id=1-2I6V52K2&amp;ct=240726&amp;st=sb</li> </ol>"},{"location":"Implementing%20CNAPP%3A%20Day%202%20Focus%20Areas/","title":"Implementing CNAPP: Day 2 Focus Areas","text":"<p>In the first part of the Cloud-Native Application Protection Platform (CNAPP) blog (here), I laid out my thoughts on tool selection criteria and day 1 focus areas. In this blog, I want to double-click into the day 2 focus areas that include pre-deployment security, implementing CNAPP capabilities beyond Cloud Security Posture Management (CSPM), designing issues management workflows, and integrating CNAPP with enterprise tools. Below is the high-level structure of how this document is organized:</p> <ol> <li>Pre-Deployment Security Capabilities </li> <li>Capabilities Beyond CSPM </li> <li>Operational Workflows and Technology Integrations</li> </ol>"},{"location":"Implementing%20CNAPP%3A%20Day%202%20Focus%20Areas/#pre-deployment-security-capabilities","title":"Pre-Deployment Security Capabilities","text":"<p>In the context of CNAPP, \"pre-deployment\" security encompasses a range of capabilities integrated into CI/CD pipelines and the overall development lifecycle to identify and block insecure resources from reaching cloud environments. Often, I have noticed that this term is narrowly defined to apply only to production environments. However, in my experience, a broader interpretation of this term\u2014viewing it as applicable to all stages before cloud deployment, i.e., \u201cbefore reaching cloud environments\u201d\u2014is more effective. This allows you to shift left and roll out capabilities in a standardized manner rather than managing disparate processes across different environments. Additionally, you can then implement policy thresholds that enforce stricter security requirements in higher environments compared to lower environments to provide the necessary freedom needed for experimentation, development, and testing. Below are the primary pre-deployment capabilities:</p> <ol> <li>Infrastructure-as-Code (IaC) and Secret Scanning </li> <li>Container Image Scanning and Software Composition Analysis (SCA)</li> </ol>"},{"location":"Implementing%20CNAPP%3A%20Day%202%20Focus%20Areas/#iac-and-secret-scanning","title":"IaC and Secret Scanning","text":"<p>This involves scanning resource deployment files\u2014such as Terraform, CloudFormation, ARM templates, Ansible playbooks, Kubernetes manifests, Helm charts, and Dockerfiles\u2014to identify misconfigurations and exposed secrets. Below are some key considerations for implementing IaC and secret scanning: </p> <ul> <li> <p>Scaling Across CI / CD Pipelines: In a cloud world where decentralized operating models are predominant, teams have autonomy over their development processes which leads to the proliferation of diverse pipelines, creating a complex landscape for security integration. This is because:</p> <ul> <li>Teams often utilize various CI/CD tools\u2014such as Jenkins, GitHub Actions, Azure DevOps, etc.\u2014each with distinct configurations and execution environments. Additionally, in large enterprises, the sheer volume of pipelines, often numbering in the hundreds or thousands, significantly increases the number of points that require security integration. This diversity complicates the enforcement of consistent scanning practices, as each pipeline may necessitate a customized approach to effectively implement IaC and secret scanning.</li> <li>Moreover, the decentralized nature of pipeline management means that security teams often lack visibility into all existing pipelines, making it challenging to ensure comprehensive coverage. The variety in pipeline configurations also complicates the task of standardizing scanning tools and processes, as what works for one pipeline might not be compatible with another.</li> </ul> <p>To address CI / CD scalability challenges, consider the following:</p> <ul> <li>Standardize CI / CD Toolchain: Collaborate with your peers in the engineering teams and build a business case for standardizing on a subset of CI / CD technologies and seek executive buy-ins. Focus on non-security benefits to gain traction and drive the message home. For example, \"Implementing a unified set of tools across teams improves collaboration and knowledge sharing, as all members work with the same processes and technologies. This standardization also leads to faster onboarding of new team members and easier skill transfer between projects, as there's only one set of tools to learn. Furthermore, a standardized toolchain reduces complexity and operational friction, simplifying maintenance and support while potentially leading to cost savings through consolidated licensing and training.\"</li> <li>Maintain Security Integration Toolkit: Develop and maintain a central repository of integration scripts and configurations for the approved CI/CD pipeline technologies, making it easier to implement security scanning consistently. Include clear guidelines and documentation to facilitate increased adoption by engineering teams. Ensure the repository is regularly updated to incorporate new CI/CD technologies or vendor updates.</li> </ul> </li> <li> <p>Preventing Bypass of Scanning Workflows: Due to the decentralized operating model for cloud, application and DevOps teams often persist admin privileges over their respective pipelines. This can pose challenges for enforcing scanning, as these teams can disable or bypass scanning steps. Therefore, when implementing scanning across the organization, it is crucial to design processes and solutions that minimize or restrict bypasses, ideally requiring security approval for any exceptions. Below are key considerations for this:</p> <ul> <li>Lockdown Important Touchpoints:<ul> <li>Isolate essential actions, such as deploying cloud resources or pushing images to registries, into reusable pipelines or workflows that are secured and can only be modified by a limited group of individuals. This ensures control over the critical touchpoints in the DevOps processes.</li> <li>Establish access controls so that deployments or image pushes can only occur through these tightly managed reusable workflows.</li> <li>Integrate security scanning and other requirements directly into these reusable workflows to ensure that necessary security measures are in place, making it difficult for teams to bypass security scans.</li> </ul> </li> <li>Leverage Native CI / CD Pipeline Capabilities:<ul> <li>Modern CI/CD platforms (e.g., Harness) offer policy management capabilities that allow organizations to define and enforce standardized practices across how their pipelines are created, managed, and executed. Leverage this policy-as-code feature to enforce security scanning (and any other requirements) as \u201crequired steps\u201d that need to be embedded for the successful creation and execution of pipelines. This provides reasonable assurance that pipelines are created with the necessary security guardrails.</li> </ul> </li> </ul> </li> <li> <p>Set Different Policies for Different Environments: Blanket security requirements (e.g., all critical, high, and medium issues must be remediated) can cause friction when enforced in lower environments as this inhibits developer productivity and increases the remediation burden for them. As such, it is advisable to have policies that have environmental context baked into them. For example, I have seen successful adoption of policies along the lines of:</p> <ul> <li>Dev &amp; Test Environments \u2014&gt; No critical issues</li> <li>Stg / Pre-Prod Environments \u2014&gt; No critical and high issues</li> <li>Prod Environments \u2014&gt; No critical, high, and medium issues</li> </ul> <p>There\u2019s potential for further granularity here based on factors such as workload type, business criticality, data sensitivity, and regulatory requirements. Another example I have seen for organizations running regulated workloads:</p> <ul> <li>Non-Regulated Workloads:<ul> <li>Dev &amp; Test Environments \u2014&gt; No critical issues</li> <li>Stg / Pre-Prod Environments \u2014&gt; No critical and high issues</li> <li>Prod Environments \u2014&gt; No critical, high, and medium issues </li> </ul> </li> <li>Regulated Workloads:<ul> <li>Dev &amp; Test Environments \u2014&gt; No critical and high issues</li> <li>Stg / Pre-Prod Environments \u2014&gt; No critical, high, and medium issues</li> <li>Prod Environments \u2014&gt; No critical, high, and medium issues</li> </ul> </li> </ul> </li> </ul>"},{"location":"Implementing%20CNAPP%3A%20Day%202%20Focus%20Areas/#container-image-scanning-and-sca","title":"Container Image Scanning and SCA","text":"<p>This includes scanning your container images and software packages during the build stage to identify vulnerabilities, misconfigurations, exposed secrets, etc.. The key considerations for image scanning and SCA are similar to the ones listed above for IaC &amp; secret scanning. </p>"},{"location":"Implementing%20CNAPP%3A%20Day%202%20Focus%20Areas/#capabilities-beyond-cspm","title":"Capabilities Beyond CSPM","text":"<p>As a recap from the previous blog, I expanded the definition of CSPM to include core CSPM because they are relatively straightforward to implement, deliver quick value, and have a similar path to operationalization. In this section, I will focus on the additional capabilities of CNAPP that build upon the insights and lessons learned - such as high-risk areas, cloud environment setup, landing zone design, naming conventions, tagging standards, etc. - from operationalizing CSPM. Below are some of the core CNAPP capabilities that extend beyond CSPM:</p> <ol> <li>Registry Scanning </li> <li>Cloud Infrastructure Entitlement Management (CIEM), Data Security Posture Management (DSPM) and Attack Surface Management </li> <li>Container and Kubernetes Security </li> <li>Cloud Detection and Response (CDR)</li> </ol>"},{"location":"Implementing%20CNAPP%3A%20Day%202%20Focus%20Areas/#registry-scanning","title":"Registry Scanning","text":"<p>This includes scanning your container registries to detect vulnerabilities and malware on images. This enables you to have visibility into images that:</p> <ul> <li>Have been pushed to the registries outside of the standard CI / CD pipelines  </li> <li>Have been running in the environment for a long period and have become vulnerable after the initial scan during the build phase</li> </ul> <p>If your organization uses cloud-native registries (e.g., Amazon Elastic Container Registry (ECR), Azure Container Registry (ACR)), CNAPP tools typically scan them without requiring additional configuration, as this feature is usually enabled by default during the initial setup. However, if you are utilizing a third-party registry (e.g., JFrog Artifactory), further configurations may be necessary for scanning. Below are key considerations for registry scanning:</p> <ul> <li> <p>Managing Volume of Issues: The number of issues identified can be quite substantial, as registries can become chaotic for several reasons:</p> <ul> <li>Teams may push numerous images and packages while only utilizing a small fraction of those for their workloads.</li> <li>The lack of a well-defined registry structure can make it difficult to track ownership and accountability.</li> <li>Registry access can be left widely open (i.e. no RBAC), allowing anyone to push to any location within the registry.</li> </ul> <p>Given these challenges, it is essential to invest efforts in correlating issues with actual running containers and workloads and prioritizing them for remediation, rather than requiring remediation for all identified issues.</p> </li> <li> <p>Assigning Remediation Ownership: The approach to assigning remediation ownership can vary significantly depending on your organization\u2019s operating model, due to the layered nature of containers.</p> <ul> <li> <p>If your organization has a central team (e.g., cloud engineering) responsible for maintaining golden base images (the base layer) that application and DevOps teams build upon with their specific layers, then it is essential to trace the issue back to the vulnerable layer and assign remediation ownership accordingly.</p> <ul> <li> <p>If the issue lies within the base layer, the effort required for remediation across the entire environment increases significantly for the following reasons:</p> <ul> <li>The central team must update or create a new golden base image that includes the fix.</li> <li>The consuming teams (i.e., application and DevOps teams) will need to redeploy their applications and workloads using this updated base layer.</li> </ul> <p>Doing this regularly requires organizations to have mature DevOps processes where teams understand the importance and need to constantly rehydrate their images. Furthermore, there should be good testing and dependency management programs in place to ensure that applications are thoroughly tested before these updates are released to production and that base image modifications do not cause any disruptions.</p> </li> <li> <p>If the issue is associated with the application layer, then the responsibility lies with the respective application / DevOps teams to remediate and redeploy their application / workload images. The operations around this are relatively easier because the burden lies exclusively with the application / DevOps teams and there are no dependencies on an enterprise team.</p> </li> </ul> </li> <li> <p>If your organization\u2019s setup is one where the concept of golden images does not exist and the application / DevOps teams own the entire lifecycle of the container images, then the ownership assignment and operations are similar to the previous point about managing issues at the application layer.</p> </li> </ul> </li> </ul>"},{"location":"Implementing%20CNAPP%3A%20Day%202%20Focus%20Areas/#ciem-dspm-and-attack-surface-management","title":"CIEM, DSPM, and Attack Surface Management","text":"<p>Although these are all broad and disparate categories, I have grouped them under one section because the approach to operationalizing each of these capabilities is similar. Once you are able to operationalize one capability, the strategy and process for the rest of the areas will be comparable. Below are the key considerations for these capabilities:</p> <ul> <li> <p>Current-State Understanding: If a comprehensive discovery exercise regarding current processes, environment setup, landing zone design, and other factors has not yet been conducted as part of operationalizing CSPM, it should be prioritized as the first step in expanding into these CNAPP areas. Below are example questions to give you insights into the kind of understanding that should be developed:</p> <ul> <li>What is the tagging standard in place, and how well is it adopted? Does the standard include details such as resource owner, application owner, and data classification?</li> <li>What is the naming convention for resources, and is it applied consistently? For example, Is there a clear method for distinguishing between cloud admin resources, developer resources, and security resources?</li> <li>Who is responsible for managing the lifecycle of the different roles and how is it done?</li> <li>What are the different 3rd parties that are expected to have access to the cloud environments?</li> <li>Is there a comprehensive asset inventory that tracks various subscriptions, accounts, and projects known or expected to have publicly exposed endpoints or sensitive data sources?</li> <li>What does the networking setup look like, and what approved patterns are in place for publicly exposing endpoints?</li> </ul> </li> <li> <p>Custom Developing &amp; Fine-Tuning Policies: Out-of-the-box (OOB) CNAPP policies are valuable for establishing a baseline understanding of the different types of detections available / possible. However, they lack the necessary context around the setup of the cloud environment to distinguish between different types of resources and accurately detect issues - such as over-permissive roles (cloud admin roles (expected) v/s EC2 instance roles (not expected)), presence of sensitive data sources (S3 bucket in regulated production account containing PII (expected) v/s S3 bucket in development containing PII (not expected)), and externally exposed endpoints (ALB in a production account expected to have internet exposure (expected) v/s ALB in development account (not expected)). Simply enabling these policies without any customization or fine-tuning can lead to false positives or a high volume of risk exceptions. Therefore, it is essential to prioritize customization and fine-tuning from the outset when operationalizing these CNAPP areas. Below are some of the customizations you should consider applying:</p> <ul> <li>Use the baseline CNAPP policies as a starting point and<ul> <li>Leverage resource tags, resource names, and accounts / subscription information to apply filtering on the base policies so that context-unaware requirements are not enforced (e.g., it is expected for cloud admins to have excessive (or admin) privileges in the environment but not for EC2 instance roles)</li> <li>Customize / modify the specific logic to tailor to your standards (e.g., if your organization's policy for inactive roles is 120 days instead of the OOB CNAPP policy of 90 days, then customize the policies accordingly).</li> </ul> </li> <li> <p>Develop a prioritized backlog of requirements and implement custom policies to identify violations to the design patterns that you have defined as an organization (e.g., resources in development should not access resources in production, resources in development should not be publicly exposed, resources in development should not contain sensitive data, etc.)</p> <p>Below are some examples to further illustrate the intent behind customization / fine-tuning of CNAPP policies:</p> <ul> <li>Identify all storage buckets and database instances containing PII, PCI, or PHI data that are missing the tag/label \u201cData Classification: Sensitive.\u201d</li> <li>Identify all storage buckets and database instances with PII, PCI, or PHI data that belong to the development or test Organizational Unit (OU).</li> <li>Identify all roles that do not have the name \u201ccloud-admin-roles\u201d but possess admin privileges.</li> <li>Identify all publicly exposed resources that do not belong to the subscription/account labeled \u201cexternal-access-account.\"</li> </ul> </li> </ul> </li> <li> <p>Correlating Findings Across Different CNAPP Areas: Once you have familiarized yourself with the environment and have some experience in developing CNAPP policies across the above mentioned different areas, you can develop more complex detections that string together issues from the different capability areas to uncover more interesting insights. Some examples include:</p> <ul> <li>IAM roles in the development OU have cross-account access to roles in production OU which have admin privileges on storage buckets or database instances that have sensitive data</li> <li>Lambda functions are publicly exposed and have administrative privileges on cloud-admin-roles</li> <li>Lambda functions are publicly exposed and contain critical vulnerabilities with known public exploit</li> </ul> </li> </ul>"},{"location":"Implementing%20CNAPP%3A%20Day%202%20Focus%20Areas/#container-and-kubernetes-security","title":"Container and Kubernetes Security:","text":"<p>This section addresses capabilities focused on securing actively running containerized workloads and Kubernetes clusters, specifically Cloud Workload Protection Platform (CWPP), Kubernetes Security Posture Management (KSPM), and Kubernetes Admissions Controller. It does not encompass capabilities like helm chart/Kubernetes manifest file scanning, Dockerfile scanning, and container image scanning, as these are more \u201cpre-deployment\u201d and have already been discussed above. Additionally, the rationale for grouping these capabilities is that they are simalar to deployment of security agents (e.g., EDR, SIEM forwarders, etc.) in that they need to be enabled on a per container, node, or cluster level. This decentralized approach can lead to increased operational complexity when scaling these capabilities across large platform footprints. Below are some key considerations for ensuring the runtime security of containers and Kubernetes clusters:</p> <ul> <li>Prioritize Critical Workloads: Implementing these capabilities across the entire organization can become a high-touch effort, especially if multiple teams serve as platform admins for their respective applications or business units. Therefore, consider focusing the rollout of these capabilities on a prioritized set of workloads or clusters instead of attempting to cover all containers or clusters. The strategy for identifying prioritized workloads will vary by organization, but production workloads, business critical workloads, externally exposed workloads, and those interacting with sensitive data are good candidates for prioritization.  </li> <li>Maintain Deployment Templates: For all the different flavors of orchestration platforms that are in-scope, develop and maintain instruction sets, guidance materials, and deployment scripts that can be readily used by the platform teams to deploy the KSPM connectors, admissions controllers, and CWPP sensors / agents. Additionally, ensure these artifacts are regularly updated to align with vendor releases and upgrades.</li> </ul>"},{"location":"Implementing%20CNAPP%3A%20Day%202%20Focus%20Areas/#cloud-detection-and-response-cdr","title":"Cloud Detection and Response (CDR)","text":"<p>This is a relatively newer area for CNAPP that includes capabilities such as malware and threat detection, cloud events analysis, forensics collection, and automated responses. While I have primarily engaged in proofs-of-concept, utilizing the platform for initial investigations and information gathering, and deploying automated responses for simple use cases (such as quarantining resources, blocking public access, enabling encryption, upgrading EC2 instances to IMDSv2, etc.), I am excited to see how this field evolves. The integration of cloud events and CNAPP detection within a single platform seems very powerful. This will give us the ability to potentially start developing policies that are based on actual activities that are happening in the cloud environments coupled with the visibility and context that a CNAPP tool can provide. This could help offload some of the query development that otherwise happens within SIEM platforms, positioning CNAPP as the first line of detection and alerting. These alerts can then be forwarded to SIEM for further correlation and analysis. This approach has the added advantage of relying on the cloud security team\u2019s expertise and understanding of the environment,  potentially resulting in more accurate alerts and fewer false positives. Below are example use-cases that could be possible by integrating cloud events with CNAPP:</p> <ul> <li>Identify all cloud IAM roles in development OU that attempted to access roles in production OU  </li> <li>Identify all cloud IAM roles that attempted to access buckets and database instances with sensitive data and had a high (above 70%) failure rate  </li> <li>Identify all cloud IAM roles that performed read actions on a high (above 15) number of services in the production OU in the last 24 hours  </li> <li>Identify all EC2 instances that are publicly exposed and attempted to create an IAM user with access keys and admin privileges</li> </ul>"},{"location":"Implementing%20CNAPP%3A%20Day%202%20Focus%20Areas/#operational-workflows-and-technology-integrations","title":"Operational Workflows and Technology Integrations","text":"<p>Operational workflows and technology integrations are important in ensuring that the insights generated by CNAPP tools are actioned efficiently and timely, thereby bridging the gap between identifying security issues and practical risk mitigation. This involves aspects such as:</p> <ul> <li>Defining remediation requirements by environment and criticality (see details in section IaC and Secret Scanning)</li> <li>Classifying issues and routing them to the appropriate remediation owners  </li> <li>Setting up integrations with existing tools and workflows  </li> <li>Providing remediation support  </li> <li>Reporting on SLA compliance and overall security posture</li> </ul> <p>While the specific workflows and integrations will differ for each organization based on factors such as size, existing toolchain, cloud and DevOps maturity, release and change management processes, etc., my experience working with various organizations around the operationalization of CNAPP issues has revealed the below key principles:</p> <ul> <li>Focus on developing solutions that are \u201cgood enough\u201d and work for your organization rather than overengineering to build the perfect workflows and integrations.   </li> <li>Foster a partnership with application and development teams by meeting them halfway in how they prefer to receive issue communications (e.g., email, Teams, Jira, Slack).  </li> <li>Avoid imposing your ideal scenario on them. This doesn\u2019t mean accommodating every tool; rather, concentrate on the tools your organization predominantly uses and allow teams to choose their preferences from that list.  </li> <li>Continuously seek feedback from the teams to enhance processes and integrations accordingly.</li> </ul> <p>Below is a visual that provides a high-level overview of classifying different types of issues, identifying responsible stakeholders, and setting up integrations for effective communication, tracking, and management of issues:  </p> <p></p> <p>In summary, addressing day 2 focus areas for CNAPP is essential for maximizing ROI and enhancing the overall maturity of the cloud security program. Prioritizing pre-deployment security capabilities - such as IaC, secret, and container image scanning - ensures vulnerabilities and misconfigurations are identified and remediated early in the development lifecycle, conserving valuable time and resources. By operationalizing capabilities beyond traditional CSPM, organizations gain increased visibility into critical security domains, including identity and access management, data security, network protection, attack surface management, container and workload security, and threat detection and response. Establishing clear operational workflows and integrating with existing tools - such as ticketing and messaging platforms - transforms security insights into actionable information that can be seamlessly incorporated into daily processes. </p> <p>Ultimately, organizations must commit to continually updating their capabilities to stay ahead of a dynamic threat landscape, recognizing that CNAPP implementation is a journey, not a one-time event. A journey that requires organizations to always be on the frontfoot and constantly update and improve existing capabilities, implement new capabilities, and seek operational efficiencies to mitigate risks and adapt to emerging threats with reasonable assurance.</p> <p>PS: CNAPP is a constantly evolving area where new capabilities are introduced regularly. The most recent announcement that made news was Wiz's release of \"Wiz Code\" that seeks to combine DevSecOps, Application Security Application Security Posture Management (ASPM), and CNAPP capabilities into a singular platform to provide unified visibility and security from \u201ccode-to-cloud\u201d. However, the intent of this blog is to focus on the core CNAPP capabilities that are available across most vendors. </p>"}]}